<?xml version="1.0" encoding="utf-8" ?>
<Project xmlns="http://schemas.microsoft.com/developer/msbuild/2003">

  <PropertyGroup Label="Scripts">
    <PowerShell>powershell -NoProfile -ExecutionPolicy Unrestricted -command</PowerShell>
    <Pack>dotnet pack &quot;$(MSBuildProjectDirectory)\$(ProjectFileName)&quot; --no-build -o C:\NugetSource -c Release</Pack>
    <Migrate>$(PowerShell) dotnet tool install --global Project2015To2017.Migrate2017.Tool %26 dotnet migrate-2017 migrate $(MSBuildProjectDirectory) -n -a -t net48</Migrate>
    <UpdateNugets>$(PowerShell) dotnet tool install nukeeper --global %26 nukeeper update --age 0</UpdateNugets>
  </PropertyGroup>

  <Target Name="Update" BeforeTargets="Build" Condition="Exists('$(MSBuildProjectDirectory)\packages.config') and '$(UpdatePackagesInLegacyFormat)' == 'true'">
    <Exec Command="$(UpdateNugets)"/>
  </Target>

  <Target Name="MigrateSolution" AfterTargets="Clean" Condition="Exists('$(MSBuildProjectDirectory)\Properties\AssemblyInfo.cs') and $(MigrateProjects) == 'true'">
    <Exec Command="$(Migrate)"/>
    <RemoveDir Directories="$(MSBuildProjectDirectory)\Properties\AssemblyInfo.cs" Condition="!Exists('$(MSBuildProjectDirectory)\packages.config')" />
  </Target>

  <Target Name="GenerateNswag" AfterTargets="Build" Condition="Exists('$(MSBuildProjectDirectory)\nswag.json')">
    <Copy SourceFiles="@(ReferencePath)" DestinationFolder="$(OutDir)References" />
    <Exec Command="$(NSwagExe_Core22) aspnetcore2swagger /assembly:$(MSBuildProjectDirectory)/bin/$(Configuration)/$(TargetFramework)/$(AssemblyName).dll /output:$(MSBuildProjectDirectory)/wwwroot/v1/swagger.json" />
    <Exec Command="$(NSwagExe_Core22) run nswag.json /variables:Configuration=$(Configuration),OutDir=$(OutDir)" />
    <RemoveDir Directories="$(OutDir)References" />
  </Target>

  <Target Name="PackNugets" AfterTargets="AfterBuild" Condition="!Exists('$(MSBuildProjectDirectory)\packages.config') and '$(DeployNugetPackages)'=='true' and '$(Configuration)'=='Release'">
    <Exec Command="$(Pack)"/>
  </Target>
  
  <Target Name="DebugEnsureNodeEnv" BeforeTargets="Build" Condition=" '$(Configuration)' == 'Debug' And !Exists('$(SpaRoot)node_modules') and '$(SpaMode)' == 'true'">
    <Exec Command="node --version" ContinueOnError="true">
      <Output TaskParameter="ExitCode" PropertyName="ErrorCode" />
    </Exec>
    <Error Condition="'$(ErrorCode)' != '0'" Text="Node.js is required to build and run this project. To continue, please install Node.js from https://nodejs.org/, and then restart your command prompt or IDE." />
    <Message Importance="high" Text="Restoring dependencies using 'npm'. This may take several minutes..." />
    <Exec WorkingDirectory="$(SpaRoot)" Command="npm install" />
  </Target>

  <Target Name="PublishRunWebpack" AfterTargets="ComputeFilesToPublish" Condition="$(SpaMode) == 'true'">
    <Exec WorkingDirectory="$(SpaRoot)" Command="npm install" />
    <Exec WorkingDirectory="$(SpaRoot)" Command="npm run build -- --prod" />
    <Exec WorkingDirectory="$(SpaRoot)" Command="npm run build:ssr -- --prod" Condition=" '$(BuildServerSideRenderer)' == 'true' " />

    <ItemGroup>
      <DistFiles Include="$(SpaRoot)dist\**; $(SpaRoot)dist-server\**" />
      <DistFiles Include="$(SpaRoot)node_modules\**" Condition="'$(BuildServerSideRenderer)' == 'true'" />
      <ResolvedFileToPublish Include="@(DistFiles->'%(FullPath)')" Exclude="@(ResolvedFileToPublish)">
        <RelativePath>%(DistFiles.Identity)</RelativePath>
        <CopyToPublishDirectory>PreserveNewest</CopyToPublishDirectory>
      </ResolvedFileToPublish>
    </ItemGroup>
  </Target>
  
</Project>